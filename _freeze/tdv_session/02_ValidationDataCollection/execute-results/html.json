{
  "hash": "2aaa621f33327b14842eb54ee7074ec0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Collection of validation data in the context of remote sensing based \n        forest monitoring\"\nsubtitle: \"Tutorial for the EON Summer School 2024\"\nauthor: Paul Magdon[University of Applied Sciences and Arts (HAWK), paul.magdon@hawk.de]\ndate: \"2023-29-08\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(raster)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLade nötiges Paket: sp\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(rprojroot)\nwd=paste0(find_rstudio_root_file(),\"/tdv_session/data/\")\n```\n:::\n\n\n# Introduction\n\n\nIn this tutorial we will explore the principles of design-based sampling. The\nsimulation part is based on a presentation of Gerad Heuveling from Wageningen \nUniversity, which he gave in the OpenGeoHub Summer School[https://opengeohub.org/summer-school/ogh-summer-school-2021/].  \n\n1. Learn how to draw a spatial random sample\n2. Learn how to draw a systematic grid for a given area of interest\n3. Run a simulation for design-based sampling\n\n# Data sets\n\nFor demonstration purposes we will work with a map of forest above ground\nbiomass (AGB) produced by the Joint Research Center(JRC) for the European Union\nEuropean Commission (Joint Research Centre (JRC) (2020) http://data.europa.eu/89h/d1fdf7aa-df33-49af-b7d5-40d226ec0da3.)\n\nTo provide a synthetic example we will assume that this map (agb_pop) is an\nerror free representation of the population. Additionally we use a second map\n(agb_model) compiled using a machine learning model (RF) also depicting the AGB \ndistribution. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnp_boundary = st_transform(st_read(paste0(wd,\"nlp-harz_aussengrenze.gpkg\")),25832)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `nlp-harz_aussengrenze' from data source \n  `/home/creu/edu/gisma-courses/EON2024/tdv_session/data/nlp-harz_aussengrenze.gpkg' \n  using driver `GPKG'\nSimple feature collection with 1 feature and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 591196.6 ymin: 5725081 xmax: 619212.6 ymax: 5751232\nProjected CRS: WGS 84 / UTM zone 32N\n```\n\n\n:::\n\n```{.r .cell-code}\nagb_pop <- raster(paste0(wd,\"agb_np_harz_truth.tif\"))\n\nagb_model <-raster(paste0(wd,\"agb_np_harz_model.tif\"))\n```\n:::\n\n\nIf we assume the $z(x_i)=$ agb.pop to be an exact representation of the \npopulation we can calculate the Root mean Square Error (RMSE) as the difference\nbetween the model predictions $\\hat{z(x_i)}$ and the population map with:\n\n$$\nRMSE = \\sqrt{\\frac{1}{N}\\sum{(z(x_{ctor. Also today there was wind, not good for m3 i})-\\hat{z}(x_{i}))^2}}\n$$\n\n::: {.cell}\n\n```{.r .cell-code}\nRMSE_pop = sqrt(cellStats((agb_pop-agb_model)^2, mean))\n```\n:::\n\n\nBy looking at the difference from the \"true\" AGB and the difference we get a true\nRMSE of *41.23* t/ha. \n\n# Collect a random sample\n\nSince we know the true RMSE, we can test if a random sample estimate has \na similar RMSE. We start with a random sample with $n=100$ sample points. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nn=100\np1 = st_sample(np_boundary,size=n)\nplot(st_geometry(np_boundary))\nplot(p1,add=TRUE,pch=1)\n```\n\n::: {.cell-output-display}\n![](02_ValidationDataCollection_files/figure-html/RMSEest-1.png){width=672}\n:::\n:::\n\n\nWe can now extract the population values and the model values at the sample\nlocations and calculate the RMSE for all sample points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample <- raster::extract((agb_pop-agb_model),as_Spatial(p1))\nRMSE_est <- sqrt(mean((sample)^2,na.rm=T))\n```\n:::\n\n\nThe random sample estimates the RMSE as 42.31. \n\nBut is this an unbiased estimate?\n\n# Simulation of many random samples\n\nTo check if our sample based estimates are unbiased we will repeat the sampling\n$k$ times. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndif <- as((agb_pop-agb_model), 'SpatialGridDataFrame')\nseed<- 12324\n\n\nk <- 500\nn <- 50\nRMSE <- rep(0,k) \n\nfor (i in 1:k) {\n  #print(i)\n  p1 = spsample(as_Spatial(np_boundary),n=n,type='random')\n  crs(p1)<-crs(dif)\n  #sample <- raster::extract((agb_pop-agb_model),p1)\n  error<-over(p1,dif)$layer\n  RMSE[i] <- sqrt(mean((error)^2,na.rm=T))\n}\n\ndf <- data.frame(x=RMSE, y=rep('a',k))\n\nggplot(data=df,aes(x=x))+\n  geom_density(data=subset(df,y=='a'),\n               fill='blue', alpha=0.5)+\n  xlab('RMSE')+geom_vline(xintercept=RMSE_pop,linewidth=1.5,\n                          color ='black', linetype='longdash')+\n  geom_vline(xintercept=mean(df$x),size=1.5,\n                          color ='black')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02_ValidationDataCollection_files/figure-html/simulation-1.png){width=672}\n:::\n:::\n\nWe see that the true RMSE and the mean of the $k$ simulation runs are almost equal.\nThus, we can assume an unbiased estimate of the RMSE.\n\nBut how does the sample size $n$ affects the accuracy?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk <- 500\nn <- 100\nRMSE_2 <- rep(0,k) \n\nfor (i in 1:k) {\n  #print(i)\n  p1 = spsample(as_Spatial(np_boundary),n=n,type='random')\n  crs(p1)<-crs(dif)\n  #sample <- raster::extract((agb_pop-agb_model),p1)\n  error<-over(p1,dif)$layer\n  RMSE_2[i] <- sqrt(mean((error)^2,na.rm=T))\n}\n\ndf_2 <- data.frame(x=RMSE_2, y=rep('b',k))\ndf<-rbind(df,df_2)\n\nggplot(data=df,aes(x=x,fill=y))+\n  geom_density(alpha=0.5)+\n  scale_fill_discrete(labels=c('Random, n=50', 'Random, n=100'))+\n  xlab('RMSE')+geom_vline(xintercept=RMSE_pop,size=1.5,\n                          color ='black', linetype='longdash')+\n  geom_vline(xintercept=mean(df$x),size=1.5,\n                          color ='black')\n```\n\n::: {.cell-output-display}\n![](02_ValidationDataCollection_files/figure-html/Simulation2-1.png){width=672}\n:::\n:::\n\n\nWe see that the precision of the esimtates is increased. How much did the\nuncertainty decrease when we increase the sample size from $n=50$ \nto $n=100$?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(RMSE_2)/sd(RMSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6675957\n```\n\n\n:::\n:::\n\n\n\n# Systematic sampling\n\nInstead of a random sampling, systematic designs are more common in forest \ninventories for the following reasons:\n\n* Easy to establish and to document\n* Ensures a balanced spatial coverage\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 = spsample(as_Spatial(np_boundary),n=n,type='regular')\n\nplot(np_boundary$geom)\nplot(p1, add=T)\n```\n\n::: {.cell-output-display}\n![](02_ValidationDataCollection_files/figure-html/systematicSample-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nk <- 500\nn <- 100\nRMSE_3 <- rep(0,k) \n\nfor (i in 1:k) {\n  #print(i)\n  p1 = spsample(as_Spatial(np_boundary),n=n,type='regular')\n  crs(p1)<-crs(dif)\n  error<-over(p1,dif)$layer\n  RMSE_3[i] <- sqrt(mean((error)^2,na.rm=T))\n}\n\ndf_3<- data.frame(x=RMSE_3, y=rep('c',k))\ndf<-rbind(df,df_3)\n\nggplot(data=df,aes(x=x, fill=y))+\n  geom_density(alpha=0.5)+\n  scale_fill_discrete(labels=c('Random, n=50', 'Random, n=100','Systematic, n=100'))+\n  xlab('RMSE')+geom_vline(xintercept=RMSE_pop,size=1.5,\n                          color ='black', linetype='longdash')+\n  geom_vline(xintercept=mean(df$x),size=1.5,\n                       color ='black')\n```\n\n::: {.cell-output-display}\n![](02_ValidationDataCollection_files/figure-html/SystematicSimlation-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "02_ValidationDataCollection_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}